// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace Proto {
class CreateComponent;
struct CreateComponentDefaultTypeInternal;
extern CreateComponentDefaultTypeInternal _CreateComponent_default_instance_;
class CreateComponentParam;
struct CreateComponentParamDefaultTypeInternal;
extern CreateComponentParamDefaultTypeInternal _CreateComponentParam_default_instance_;
}  // namespace Proto
PROTOBUF_NAMESPACE_OPEN
template<> ::Proto::CreateComponent* Arena::CreateMaybeMessage<::Proto::CreateComponent>(Arena*);
template<> ::Proto::CreateComponentParam* Arena::CreateMaybeMessage<::Proto::CreateComponentParam>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Proto {

enum CreateComponentParam_ParamType : int {
  CreateComponentParam_ParamType_Int = 0,
  CreateComponentParam_ParamType_String = 1,
  CreateComponentParam_ParamType_CreateComponentParam_ParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CreateComponentParam_ParamType_CreateComponentParam_ParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CreateComponentParam_ParamType_IsValid(int value);
constexpr CreateComponentParam_ParamType CreateComponentParam_ParamType_ParamType_MIN = CreateComponentParam_ParamType_Int;
constexpr CreateComponentParam_ParamType CreateComponentParam_ParamType_ParamType_MAX = CreateComponentParam_ParamType_String;
constexpr int CreateComponentParam_ParamType_ParamType_ARRAYSIZE = CreateComponentParam_ParamType_ParamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CreateComponentParam_ParamType_descriptor();
template<typename T>
inline const std::string& CreateComponentParam_ParamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CreateComponentParam_ParamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CreateComponentParam_ParamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CreateComponentParam_ParamType_descriptor(), enum_t_value);
}
inline bool CreateComponentParam_ParamType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CreateComponentParam_ParamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CreateComponentParam_ParamType>(
    CreateComponentParam_ParamType_descriptor(), name, value);
}
// ===================================================================

class CreateComponentParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateComponentParam) */ {
 public:
  inline CreateComponentParam() : CreateComponentParam(nullptr) {}
  ~CreateComponentParam() override;
  explicit PROTOBUF_CONSTEXPR CreateComponentParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateComponentParam(const CreateComponentParam& from);
  CreateComponentParam(CreateComponentParam&& from) noexcept
    : CreateComponentParam() {
    *this = ::std::move(from);
  }

  inline CreateComponentParam& operator=(const CreateComponentParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateComponentParam& operator=(CreateComponentParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateComponentParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateComponentParam* internal_default_instance() {
    return reinterpret_cast<const CreateComponentParam*>(
               &_CreateComponentParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateComponentParam& a, CreateComponentParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateComponentParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateComponentParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateComponentParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateComponentParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateComponentParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateComponentParam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateComponentParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateComponentParam";
  }
  protected:
  explicit CreateComponentParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CreateComponentParam_ParamType ParamType;
  static constexpr ParamType Int =
    CreateComponentParam_ParamType_Int;
  static constexpr ParamType String =
    CreateComponentParam_ParamType_String;
  static inline bool ParamType_IsValid(int value) {
    return CreateComponentParam_ParamType_IsValid(value);
  }
  static constexpr ParamType ParamType_MIN =
    CreateComponentParam_ParamType_ParamType_MIN;
  static constexpr ParamType ParamType_MAX =
    CreateComponentParam_ParamType_ParamType_MAX;
  static constexpr int ParamType_ARRAYSIZE =
    CreateComponentParam_ParamType_ParamType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ParamType_descriptor() {
    return CreateComponentParam_ParamType_descriptor();
  }
  template<typename T>
  static inline const std::string& ParamType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ParamType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ParamType_Name.");
    return CreateComponentParam_ParamType_Name(enum_t_value);
  }
  static inline bool ParamType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ParamType* value) {
    return CreateComponentParam_ParamType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStringParamFieldNumber = 3,
    kTypeFieldNumber = 1,
    kIntParamFieldNumber = 2,
  };
  // string string_param = 3;
  void clear_string_param();
  const std::string& string_param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_param();
  PROTOBUF_NODISCARD std::string* release_string_param();
  void set_allocated_string_param(std::string* string_param);
  private:
  const std::string& _internal_string_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_param(const std::string& value);
  std::string* _internal_mutable_string_param();
  public:

  // .Proto.CreateComponentParam.ParamType type = 1;
  void clear_type();
  ::Proto::CreateComponentParam_ParamType type() const;
  void set_type(::Proto::CreateComponentParam_ParamType value);
  private:
  ::Proto::CreateComponentParam_ParamType _internal_type() const;
  void _internal_set_type(::Proto::CreateComponentParam_ParamType value);
  public:

  // int32 int_param = 2;
  void clear_int_param();
  int32_t int_param() const;
  void set_int_param(int32_t value);
  private:
  int32_t _internal_int_param() const;
  void _internal_set_int_param(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.CreateComponentParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_param_;
  int type_;
  int32_t int_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class CreateComponent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Proto.CreateComponent) */ {
 public:
  inline CreateComponent() : CreateComponent(nullptr) {}
  ~CreateComponent() override;
  explicit PROTOBUF_CONSTEXPR CreateComponent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateComponent(const CreateComponent& from);
  CreateComponent(CreateComponent&& from) noexcept
    : CreateComponent() {
    *this = ::std::move(from);
  }

  inline CreateComponent& operator=(const CreateComponent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateComponent& operator=(CreateComponent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateComponent& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateComponent* internal_default_instance() {
    return reinterpret_cast<const CreateComponent*>(
               &_CreateComponent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateComponent& a, CreateComponent& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateComponent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateComponent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateComponent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateComponent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateComponent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateComponent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateComponent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Proto.CreateComponent";
  }
  protected:
  explicit CreateComponent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 3,
    kClassNameFieldNumber = 1,
    kParentSnFieldNumber = 2,
  };
  // repeated .Proto.CreateComponentParam params = 3;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::Proto::CreateComponentParam* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >*
      mutable_params();
  private:
  const ::Proto::CreateComponentParam& _internal_params(int index) const;
  ::Proto::CreateComponentParam* _internal_add_params();
  public:
  const ::Proto::CreateComponentParam& params(int index) const;
  ::Proto::CreateComponentParam* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >&
      params() const;

  // string class_name = 1;
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // uint64 parent_sn = 2;
  void clear_parent_sn();
  uint64_t parent_sn() const;
  void set_parent_sn(uint64_t value);
  private:
  uint64_t _internal_parent_sn() const;
  void _internal_set_parent_sn(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Proto.CreateComponent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam > params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  uint64_t parent_sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateComponentParam

// .Proto.CreateComponentParam.ParamType type = 1;
inline void CreateComponentParam::clear_type() {
  type_ = 0;
}
inline ::Proto::CreateComponentParam_ParamType CreateComponentParam::_internal_type() const {
  return static_cast< ::Proto::CreateComponentParam_ParamType >(type_);
}
inline ::Proto::CreateComponentParam_ParamType CreateComponentParam::type() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.type)
  return _internal_type();
}
inline void CreateComponentParam::_internal_set_type(::Proto::CreateComponentParam_ParamType value) {
  
  type_ = value;
}
inline void CreateComponentParam::set_type(::Proto::CreateComponentParam_ParamType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.type)
}

// int32 int_param = 2;
inline void CreateComponentParam::clear_int_param() {
  int_param_ = 0;
}
inline int32_t CreateComponentParam::_internal_int_param() const {
  return int_param_;
}
inline int32_t CreateComponentParam::int_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.int_param)
  return _internal_int_param();
}
inline void CreateComponentParam::_internal_set_int_param(int32_t value) {
  
  int_param_ = value;
}
inline void CreateComponentParam::set_int_param(int32_t value) {
  _internal_set_int_param(value);
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.int_param)
}

// string string_param = 3;
inline void CreateComponentParam::clear_string_param() {
  string_param_.ClearToEmpty();
}
inline const std::string& CreateComponentParam::string_param() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponentParam.string_param)
  return _internal_string_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateComponentParam::set_string_param(ArgT0&& arg0, ArgT... args) {
 
 string_param_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Proto.CreateComponentParam.string_param)
}
inline std::string* CreateComponentParam::mutable_string_param() {
  std::string* _s = _internal_mutable_string_param();
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponentParam.string_param)
  return _s;
}
inline const std::string& CreateComponentParam::_internal_string_param() const {
  return string_param_.Get();
}
inline void CreateComponentParam::_internal_set_string_param(const std::string& value) {
  
  string_param_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateComponentParam::_internal_mutable_string_param() {
  
  return string_param_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateComponentParam::release_string_param() {
  // @@protoc_insertion_point(field_release:Proto.CreateComponentParam.string_param)
  return string_param_.Release();
}
inline void CreateComponentParam::set_allocated_string_param(std::string* string_param) {
  if (string_param != nullptr) {
    
  } else {
    
  }
  string_param_.SetAllocated(string_param, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (string_param_.IsDefault()) {
    string_param_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateComponentParam.string_param)
}

// -------------------------------------------------------------------

// CreateComponent

// string class_name = 1;
inline void CreateComponent::clear_class_name() {
  class_name_.ClearToEmpty();
}
inline const std::string& CreateComponent::class_name() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateComponent::set_class_name(ArgT0&& arg0, ArgT... args) {
 
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.class_name)
}
inline std::string* CreateComponent::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponent.class_name)
  return _s;
}
inline const std::string& CreateComponent::_internal_class_name() const {
  return class_name_.Get();
}
inline void CreateComponent::_internal_set_class_name(const std::string& value) {
  
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateComponent::_internal_mutable_class_name() {
  
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateComponent::release_class_name() {
  // @@protoc_insertion_point(field_release:Proto.CreateComponent.class_name)
  return class_name_.Release();
}
inline void CreateComponent::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    
  } else {
    
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Proto.CreateComponent.class_name)
}

// uint64 parent_sn = 2;
inline void CreateComponent::clear_parent_sn() {
  parent_sn_ = uint64_t{0u};
}
inline uint64_t CreateComponent::_internal_parent_sn() const {
  return parent_sn_;
}
inline uint64_t CreateComponent::parent_sn() const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.parent_sn)
  return _internal_parent_sn();
}
inline void CreateComponent::_internal_set_parent_sn(uint64_t value) {
  
  parent_sn_ = value;
}
inline void CreateComponent::set_parent_sn(uint64_t value) {
  _internal_set_parent_sn(value);
  // @@protoc_insertion_point(field_set:Proto.CreateComponent.parent_sn)
}

// repeated .Proto.CreateComponentParam params = 3;
inline int CreateComponent::_internal_params_size() const {
  return params_.size();
}
inline int CreateComponent::params_size() const {
  return _internal_params_size();
}
inline void CreateComponent::clear_params() {
  params_.Clear();
}
inline ::Proto::CreateComponentParam* CreateComponent::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.CreateComponent.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >*
CreateComponent::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:Proto.CreateComponent.params)
  return &params_;
}
inline const ::Proto::CreateComponentParam& CreateComponent::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::Proto::CreateComponentParam& CreateComponent::params(int index) const {
  // @@protoc_insertion_point(field_get:Proto.CreateComponent.params)
  return _internal_params(index);
}
inline ::Proto::CreateComponentParam* CreateComponent::_internal_add_params() {
  return params_.Add();
}
inline ::Proto::CreateComponentParam* CreateComponent::add_params() {
  ::Proto::CreateComponentParam* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:Proto.CreateComponent.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Proto::CreateComponentParam >&
CreateComponent::params() const {
  // @@protoc_insertion_point(field_list:Proto.CreateComponent.params)
  return params_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Proto::CreateComponentParam_ParamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::CreateComponentParam_ParamType>() {
  return ::Proto::CreateComponentParam_ParamType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
